<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdditionalInformations" xml:space="preserve">
    <value>Additional Informations</value>
  </data>
  <data name="AddNewCategory" xml:space="preserve">
    <value>New category</value>
  </data>
  <data name="AddNewCost" xml:space="preserve">
    <value>New cost</value>
  </data>
  <data name="AddNewIncome" xml:space="preserve">
    <value>New income</value>
  </data>
  <data name="AddNewShop" xml:space="preserve">
    <value>New shop</value>
  </data>
  <data name="AmountOfMoney" xml:space="preserve">
    <value>Money</value>
  </data>
  <data name="ButtonCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ButtonDeleteDatabase" xml:space="preserve">
    <value>Delete all cost, income and plan datas</value>
  </data>
  <data name="ButtonDeleteForm" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="ButtonDeleteSelectedItem" xml:space="preserve">
    <value>Delete selected</value>
  </data>
  <data name="ButtonSave" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="ButtonShowPlans" xml:space="preserve">
    <value>Show plans</value>
  </data>
  <data name="ButtonShowPlansForCategory" xml:space="preserve">
    <value>Show plans of selected category</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="Clothes" xml:space="preserve">
    <value>Clothes</value>
  </data>
  <data name="CostNotInShop" xml:space="preserve">
    <value>Other / Not shop</value>
  </data>
  <data name="CostsStatistics" xml:space="preserve">
    <value>Statistics of costs</value>
  </data>
  <data name="Currency" xml:space="preserve">
    <value>Ft</value>
  </data>
  <data name="DateOfCost" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="DateOfIncome" xml:space="preserve">
    <value>Income arrived at</value>
  </data>
  <data name="DeleteCategory" xml:space="preserve">
    <value>Delete category</value>
  </data>
  <data name="Extra" xml:space="preserve">
    <value>Extra</value>
  </data>
  <data name="FoodAndOtherHousehold" xml:space="preserve">
    <value>Food / other household</value>
  </data>
  <data name="ForStringHasPlans" xml:space="preserve">
    <value>(Plans involved)</value>
  </data>
  <data name="ForStringNoPlans" xml:space="preserve">
    <value>(No plans)</value>
  </data>
  <data name="ForStringNotInvolvePlans" xml:space="preserve">
    <value>(Plans does not involved)</value>
  </data>
  <data name="ForStringTextCurrentBalance" xml:space="preserve">
    <value>Balance</value>
  </data>
  <data name="Health" xml:space="preserve">
    <value>Health</value>
  </data>
  <data name="Hobbies" xml:space="preserve">
    <value>Hobbies</value>
  </data>
  <data name="HouseholdAppliancesAndMaintenance" xml:space="preserve">
    <value>Household appliances and maintenance</value>
  </data>
  <data name="IncomeStatistics" xml:space="preserve">
    <value>Statistics of income</value>
  </data>
  <data name="Information" xml:space="preserve">
    <value>Information</value>
  </data>
  <data name="Menu" xml:space="preserve">
    <value>Menu</value>
  </data>
  <data name="NotificationsNoStatData" xml:space="preserve">
    <value>No data found for this setting.</value>
  </data>
  <data name="Others" xml:space="preserve">
    <value>Others</value>
  </data>
  <data name="Overhead" xml:space="preserve">
    <value>Overhead</value>
  </data>
  <data name="PlanCost" xml:space="preserve">
    <value>Planning costs</value>
  </data>
  <data name="PlanCostStatistics" xml:space="preserve">
    <value>Statistics of planned costs</value>
  </data>
  <data name="Rental" xml:space="preserve">
    <value>Rental</value>
  </data>
  <data name="SetIfPlansInvolved" xml:space="preserve">
    <value>Show balance with also counting the planned costs</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Shop" xml:space="preserve">
    <value>Shop</value>
  </data>
  <data name="ShopAldi" xml:space="preserve">
    <value>Aldi</value>
  </data>
  <data name="ShopAuch" xml:space="preserve">
    <value>Auchan</value>
  </data>
  <data name="ShopBersh" xml:space="preserve">
    <value>Bershka</value>
  </data>
  <data name="ShopCA" xml:space="preserve">
    <value>C&amp;A</value>
  </data>
  <data name="ShopCoop" xml:space="preserve">
    <value>Coop</value>
  </data>
  <data name="ShopDM" xml:space="preserve">
    <value>DM</value>
  </data>
  <data name="ShopLidl" xml:space="preserve">
    <value>Lidl</value>
  </data>
  <data name="ShopMM" xml:space="preserve">
    <value>MediaMarkt</value>
  </data>
  <data name="ShopPenny" xml:space="preserve">
    <value>Penny Market</value>
  </data>
  <data name="ShopRM" xml:space="preserve">
    <value>Rossmann</value>
  </data>
  <data name="ShopTesc" xml:space="preserve">
    <value>Tesco</value>
  </data>
  <data name="ShowAllCosts" xml:space="preserve">
    <value>Show all costs</value>
  </data>
  <data name="ShowSpecificCostsForCategory" xml:space="preserve">
    <value>Costs for picked category</value>
  </data>
  <data name="Sports" xml:space="preserve">
    <value>Sports</value>
  </data>
  <data name="TextCategoryAlreadyExists" xml:space="preserve">
    <value>The category is already exists!</value>
  </data>
  <data name="TextConfirmChangeSettings" xml:space="preserve">
    <value>Do you really want to save the new settings?</value>
  </data>
  <data name="TextConfirmDeleteData" xml:space="preserve">
    <value>Do you really want to delete the data?</value>
  </data>
  <data name="TextConfirmDeleteDatabase" xml:space="preserve">
    <value>Do you really want to delete all costs, income and plans from the database?</value>
  </data>
  <data name="TextConfirmFormDelete" xml:space="preserve">
    <value>Do you really want to delete the form?</value>
  </data>
  <data name="TextError" xml:space="preserve">
    <value>Unexpected error occured.</value>
  </data>
  <data name="TextSaveSuccess" xml:space="preserve">
    <value>Data saved successfully.</value>
  </data>
  <data name="TextSettingsAlreadyMatch" xml:space="preserve">
    <value>No changes were made, since the settings was already matched!</value>
  </data>
  <data name="TextShopAlreadyExists" xml:space="preserve">
    <value>The shop is already exists!</value>
  </data>
  <data name="TitleCostsPerCategory" xml:space="preserve">
    <value>Statistics of costs per categories</value>
  </data>
  <data name="TitleDetailedCostsPerCategories" xml:space="preserve">
    <value>Detailed costs for categories</value>
  </data>
  <data name="TitleError" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="TitleOfIncome" xml:space="preserve">
    <value>Title of income (e.g. salary)</value>
  </data>
  <data name="TitleOfPlanCost" xml:space="preserve">
    <value>Title of planned cost</value>
  </data>
  <data name="TitleSuccess" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="TitleWarning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="UiInformationAboutNewShop" xml:space="preserve">
    <value>You can add new categories and shops under 'Settings' page.</value>
  </data>
</root>